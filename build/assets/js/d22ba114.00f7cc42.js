"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5821:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={title:"PHP Data Objects (PDO)",tags:["php","db"],sidebar_label:"20. PHP Data Objects (PDO)",sidebar_position:20},o=void 0,l={unversionedId:"PHP/php_data_objects",id:"PHP/php_data_objects",title:"PHP Data Objects (PDO)",description:"\u2022 Accessing a database involves five steps:",source:"@site/docs/PHP/20_php_data_objects.md",sourceDirName:"PHP",slug:"/PHP/php_data_objects",permalink:"/docs/PHP/php_data_objects",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/PHP/20_php_data_objects.md",tags:[{label:"php",permalink:"/docs/tags/php"},{label:"db",permalink:"/docs/tags/db"}],version:"current",sidebarPosition:20,frontMatter:{title:"PHP Data Objects (PDO)",tags:["php","db"],sidebar_label:"20. PHP Data Objects (PDO)",sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"19. Input Validation",permalink:"/docs/PHP/input_validation"},next:{title:"\ud83d\udcd6 Today I Learned",permalink:"/docs/"}},s={},c=[{value:"Creating a Connection",id:"creating-a-connection",level:3},{value:"Creating a MySQL Connection",id:"creating-a-mysql-connection",level:3},{value:"Creating an SQLite Connection",id:"creating-an-sqlite-connection",level:3},{value:"Handling Errors",id:"handling-errors",level:3},{value:"A <code>db_defs.php</code> file",id:"a-db_defsphp-file",level:3},{value:"Web Application Structure",id:"web-application-structure",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u2022 Accessing a database involves five steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Connecting to the SQL server."),(0,i.kt)("li",{parentName:"ol"},"Selecting the database to access."),(0,i.kt)("li",{parentName:"ol"},"Executing the query or command."),(0,i.kt)("li",{parentName:"ol"},"Processing the results (if any)."),(0,i.kt)("li",{parentName:"ol"},"Close the connection.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When using RDBMS specific APIs all of the preceding steps must be performed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PDO")," combines the first two steps into one",(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"note also that SQLite doesn't have a database server to connect to"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PDO")," also automatically takes care of closing the connection. (Step 5)")),(0,i.kt)("h3",{id:"creating-a-connection"},"Creating a Connection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Every time a web request is made"),", a PHP script must make a new connection with the SQL server (the connections can not be preserved between requests)."),(0,i.kt)("li",{parentName:"ul"},"Creating a new ",(0,i.kt)("inlineCode",{parentName:"li"},"PDO")," connection is performed by creating a new PDO object:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$db = new PDO(connection_string);\n")),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"the connection string will differ based on the type of database.")))),(0,i.kt)("h3",{id:"creating-a-mysql-connection"},"Creating a MySQL Connection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A MySQL connection will require a host name, database name, username and password, e.g.:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$db = new PDO('mysql:host=localhost;dbname=test', $username, $password);\n")))),(0,i.kt)("h3",{id:"creating-an-sqlite-connection"},"Creating an SQLite Connection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'A SQLite connection only requires the path to the database, e.g. if the database is in a "db" subfolder:',(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$db = new PDO('sqlite:db/test.sqlite');\n"))),(0,i.kt)("li",{parentName:"ul"},"If the file test.sqlite doesn't exist SQLite will create it.")),(0,i.kt)("h3",{id:"handling-errors"},"Handling Errors"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PDO has three different modes for handling errors:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SILENT")," - default mode where errors are detect via return values"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WARNING")," - a traditional warning is emitted, useful when debugging"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EXCEPTION")," - a exception is thrown on an error"))),(0,i.kt)("li",{parentName:"ul"},"We will use the EXCEPTION mode in this course for the following reasons:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Silent")," mode requires that the return value of every database call is checked."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Exception")," handling is generally good practice as it ensures that every error is detected and it moves error handling to the bottom of the function."))),(0,i.kt)("li",{parentName:"ul"},"We need to activate exception handling on our database connection:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n"))),(0,i.kt)("li",{parentName:"ul"},"Exception handling in PHP is very similar to Java."),(0,i.kt)("li",{parentName:"ul"},"In most cases when an error occurs at the database level there isn't an elegant\nway to respond to the user apart from showing an error screen."),(0,i.kt)("li",{parentName:"ul"},"For development purposes it is useful to display the error itself."),(0,i.kt)("li",{parentName:"ul"},"However, we don't want the rest of the code to run because it could break remaining code and the error message will print outside of valid HTML."),(0,i.kt)("li",{parentName:"ul"},"We can end the execution of our PHP early by calling the ",(0,i.kt)("inlineCode",{parentName:"li"},"die()")," function."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"die()")," function can also take a string which will be echoed to the output."),(0,i.kt)("li",{parentName:"ul"},"Connecting to a database and handling an exception:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"try {\n  $db = new PDO('sqlite:db/test.sqlite');\n  $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) { \n  die(\"Error: \" . $e->getMessage());\n}\n")))),(0,i.kt)("h3",{id:"a-db_defsphp-file"},"A ",(0,i.kt)("inlineCode",{parentName:"h3"},"db_defs.php")," file"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"One of the big advantages of PDO is the ability to switch RDBMS without affecting the rest of the code."),(0,i.kt)("li",{parentName:"ul"},"However, every time we access the database we have a database specific connection string!"),(0,i.kt)("li",{parentName:"ul"},"This would need to be changed in every file."),(0,i.kt)("li",{parentName:"ul"},"Instead it is better if we create a ",(0,i.kt)("inlineCode",{parentName:"li"},"db_open()")," function which contains the creation\nof the connection."),(0,i.kt)("li",{parentName:"ul"},"If we change databases later then only the ",(0,i.kt)("inlineCode",{parentName:"li"},"db_open()")," function needs to be changed."),(0,i.kt)("li",{parentName:"ul"},"An example db_defs.php file:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"function db_open(){\n  try {\n    $db = new PDO('sqlite:db/database.sqlite'); \n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) { \n    die(\"Error: \" . $e->getMessage());\n  }\n  return $db; \n}\n"))),(0,i.kt)("li",{parentName:"ul"},"This function would be called as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$db = db_open();\n")),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},'You will also need to include "includes/db_defs.php"')))),(0,i.kt)("h3",{id:"web-application-structure"},"Web Application Structure"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"As many different types of files are required to build a web application, a well organised directory structure is required."),(0,i.kt)("li",{parentName:"ul"},"A web application could have the following structure (note this is if you aren't using Laravel):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  web application directory/ \n    includes subdirectory/\n      db_defs.php - functions relating to SQL such as connecting and handling errors.\n      defs.php - other web application functions. \n    db subdirectory/\n      database.sqlite - the SQLite database \n    sql subdirectory/\n      database.sql - the SQL definitions file other web application files\n")))}u.isMDXComponent=!0}}]);