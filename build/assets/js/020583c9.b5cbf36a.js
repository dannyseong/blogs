"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8327],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>h});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=t.createContext({}),p=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=p(e.components);return t.createElement(o.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(o,".").concat(d)]||u[d]||m[d]||i;return n?t.createElement(h,l(l({ref:a},c),{},{components:n})):t.createElement(h,l({ref:a},c))}));function h(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5625:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=n(7462),r=(n(7294),n(3905));const i={title:"Basics of PHP Syntax",tags:["php"],sidebar_label:"3. Basics of PHP Syntax",sidebar_position:3},l=void 0,s={unversionedId:"PHP/syntax_basics",id:"PHP/syntax_basics",title:"Basics of PHP Syntax",description:"Semi-colons",source:"@site/docs/PHP/3_syntax_basics.md",sourceDirName:"PHP",slug:"/PHP/syntax_basics",permalink:"/docs/PHP/syntax_basics",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/PHP/3_syntax_basics.md",tags:[{label:"php",permalink:"/docs/tags/php"}],version:"current",sidebarPosition:3,frontMatter:{title:"Basics of PHP Syntax",tags:["php"],sidebar_label:"3. Basics of PHP Syntax",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"2. PHP Files",permalink:"/docs/PHP/syntax_php_files"},next:{title:"4. Arrays in PHP",permalink:"/docs/PHP/syntax_array"}},o={},p=[{value:"Semi-colons",id:"semi-colons",level:3},{value:"Variables",id:"variables",level:3},{value:"Strings",id:"strings",level:3},{value:"1. Variable Expansion",id:"1-variable-expansion",level:5},{value:"1-1. New-line characters",id:"1-1-new-line-characters",level:5},{value:"2. String Concatenation",id:"2-string-concatenation",level:5},{value:"3. Echo parameters",id:"3-echo-parameters",level:5},{value:"4. Which String concatenation technique should be used?",id:"4-which-string-concatenation-technique-should-be-used",level:5},{value:"5. When should single- and double-quotes be used?",id:"5-when-should-single--and-double-quotes-be-used",level:5}],c={toc:p},u="wrapper";function m(e){let{components:a,...n}=e;return(0,r.kt)(u,(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"semi-colons"},"Semi-colons"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"PHP requires each statement to end with a semi-colon.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},'echo "Hello, World!";\n')))),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Variables in PHP begin with ",(0,r.kt)("inlineCode",{parentName:"li"},"$"),", e.g.:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$name = "Danny"\n'))),(0,r.kt)("li",{parentName:"ul"},"Variable names are ",(0,r.kt)("inlineCode",{parentName:"li"},"case-sensitive"),(0,r.kt)("sup",{parentName:"li",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),"."),(0,r.kt)("li",{parentName:"ul"},"Variables are ",(0,r.kt)("inlineCode",{parentName:"li"},"dynamically-typed"),", i.e. the type of the variable depends on the data that has been assigned to it.")),(0,r.kt)("h3",{id:"strings"},"Strings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Strings in PHP can be delimited using either single- or double-quotes:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$name = \"Danny\";\n$name = 'Danny';\n"))),(0,r.kt)("li",{parentName:"ul"},"However, there is a difference. PHP allows variables to be expanded into double-quoted strings, but not single-quoted strings.")),(0,r.kt)("h5",{id:"1-variable-expansion"},"1. Variable Expansion"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$name = 'Danny';\necho \"My name is $name\"; // My name is Danny\necho 'My name is $name'; // My name is $name\n")),(0,r.kt)("h5",{id:"1-1-new-line-characters"},"1-1. New-line characters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Strings in PHP preserve new-line characters, e.g.:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'echo "A string\nthat has\nthree lines.";\n/* output\nA string\nthat has\nthree lines.\n*/\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"However, it should be noted that HTML will ignore these newline characters."),(0,r.kt)("li",{parentName:"ul"},"For the string to appear over three lines in HTML use the line break ",(0,r.kt)("inlineCode",{parentName:"li"},"<br>")," tag:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'echo "A string <br>\nthat has <br>\nthree lines.";\n')),(0,r.kt)("h5",{id:"2-string-concatenation"},"2. String Concatenation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Strings are concatenated using the period ",(0,r.kt)("inlineCode",{parentName:"li"},"(.)")," operator between two strings:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$name = "Danny";\necho "My name is ".$name; // My name is Danny\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"However, generally variable expension is simpler.")),(0,r.kt)("h5",{id:"3-echo-parameters"},"3. Echo parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The echo command can also take multiple parameters separated by commas, e.g.:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$name = "Danny";\necho "My name is ", $name; // My name is Danny\n')),(0,r.kt)("h5",{id:"4-which-string-concatenation-technique-should-be-used"},"4. Which String concatenation technique should be used?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"From a performance perspective echo with comma separated parameters is the fastest."),(0,r.kt)("li",{parentName:"ul"},"However, variable expansion is the easiest to type and read.")),(0,r.kt)("h5",{id:"5-when-should-single--and-double-quotes-be-used"},"5. When should single- and double-quotes be used?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parsing variables")," in double-quoted strings incurs on overhead."),(0,r.kt)("li",{parentName:"ul"},"If a string contains ",(0,r.kt)("strong",{parentName:"li"},"no variables")," then single-quotes should be used.")),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},"This means that variables with names like ",(0,r.kt)("inlineCode",{parentName:"li"},"$myVar"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$MyVar"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"$MYVAR")," are all treated as different variables.",(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);