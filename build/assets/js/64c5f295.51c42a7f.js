"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1883],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=i,m=u["".concat(o,".").concat(d)]||u[d]||g[d]||s;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,a=new Array(s);a[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5492:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const s={title:"Essential Built-in Functions for String",tags:["php"],sidebar_label:"15. Built-in Functions (String)",sidebar_position:15},a=void 0,l={unversionedId:"PHP/syntax_builtin-functions",id:"PHP/syntax_builtin-functions",title:"Essential Built-in Functions for String",description:"Number of characters",source:"@site/docs/PHP/15_syntax_builtin-functions.md",sourceDirName:"PHP",slug:"/PHP/syntax_builtin-functions",permalink:"/docs/PHP/syntax_builtin-functions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/PHP/15_syntax_builtin-functions.md",tags:[{label:"php",permalink:"/docs/tags/php"}],version:"current",sidebarPosition:15,frontMatter:{title:"Essential Built-in Functions for String",tags:["php"],sidebar_label:"15. Built-in Functions (String)",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"14. Define Constants",permalink:"/docs/PHP/syntax_constants"},next:{title:"16. Debugging tips",permalink:"/docs/PHP/debugging_tips"}},o={},c=[{value:"Number of characters",id:"number-of-characters",level:2},{value:"Search",id:"search",level:2},{value:"Case insensitive search",id:"case-insensitive-search",level:2},{value:"Convert to Upper and Lowercase",id:"convert-to-upper-and-lowercase",level:2},{value:"Trim whitespace Substring",id:"trim-whitespace-substring",level:2},{value:"Splitting a string",id:"splitting-a-string",level:2},{value:"Substring",id:"substring",level:2}],p={toc:c},u="wrapper";function g(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"number-of-characters"},"Number of characters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="int strlen(string $string)"',title:'"int',"strlen(string":!0,'$string)"':!0},'$str = "Test string";\necho strlen($str); // prints 11\n')),(0,i.kt)("h2",{id:"search"},"Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",0:!0,className:"language-php",metastring:'title="mixed strpos ( string $haystack , mixed $needle [,int $offset = 0 ] )"',title:'"mixed',strpos:!0,"(":!0,string:!0,$haystack:!0,",":!0,mixed:!0,$needle:!0,"[,int":!0,$offset:!0,"":"","]":!0,')"':!0},'$str = "This is a test"; \necho strpos($str, "is"); // prints 2\n')),(0,i.kt)("h2",{id:"case-insensitive-search"},"Case insensitive search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",0:!0,className:"language-php",metastring:'title="mixed stripos ( string $haystack , string $needle [, int $offset = 0 ] )"',title:'"mixed',stripos:!0,"(":!0,string:!0,$haystack:!0,",":!0,$needle:!0,"[,":!0,int:!0,$offset:!0,"":"","]":!0,')"':!0},'$str = "This is a test"; \necho stripos($str, "th"); // prints 0\n')),(0,i.kt)("h2",{id:"convert-to-upper-and-lowercase"},"Convert to Upper and Lowercase"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$upper = strtoupper("lower"); \n$lower = strtolower("UPPER");\n')),(0,i.kt)("h2",{id:"trim-whitespace-substring"},"Trim whitespace Substring"),(0,i.kt)("p",null,"Trims whitespace from beginning and end of string including spaces, tabs, and new line characters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$str = " This is a test "; echo trim($str);\n// prints "This is a test"\n')),(0,i.kt)("h2",{id:"splitting-a-string"},"Splitting a string"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Returns an array of strings separated by delimiter:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="array explode ( string $delimiter , string $string [, int $limit ] )"',title:'"array',explode:!0,"(":!0,string:!0,$delimiter:!0,",":!0,$string:!0,"[,":!0,int:!0,$limit:!0,"]":!0,')"':!0},'$str = "Tom, Bill, Harry"; \n$array = explode(", ", $str);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$array"),' will contain three strings "Tom", "Bill", and "Harry".')),(0,i.kt)("h2",{id:"substring"},"Substring"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="string substr ( string $string , int $start [,int $length ] )"',title:'"string',substr:!0,"(":!0,string:!0,$string:!0,",":!0,int:!0,$start:!0,"[,int":!0,$length:!0,"]":!0,')"':!0},'$str = "Test string"; \necho substr($str, 5, 6) // prints "string"\n')))}g.isMDXComponent=!0}}]);