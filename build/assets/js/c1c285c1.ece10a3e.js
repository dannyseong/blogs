"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7244],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={authors:"danny",title:"Sanitisation: Its Significance and Real-World Implementation\n",tag:["web development","sanitization"]},s=void 0,o={permalink:"/blog/2023/08/27/sanitization",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-08-27-sanitization.md",source:"@site/blog/2023-08-27-sanitization.md",title:"Sanitisation: Its Significance and Real-World Implementation\n",description:"Why is Sanitisation Important?",date:"2023-08-27T00:00:00.000Z",formattedDate:"August 27, 2023",tags:[],readingTime:1.79,hasTruncateMarker:!1,authors:[{name:"Daehoon Seong",title:"Developers & Electrical Engineer",url:"https://github.com/dannyseong",imageURL:"https://avatars.githubusercontent.com/u/99000722?v=4",key:"danny"}],frontMatter:{authors:"danny",title:"Sanitisation: Its Significance and Real-World Implementation\n",tag:["web development","sanitization"]},nextItem:{title:"Validation: Deeper Dive and Practical Application\n",permalink:"/blog/2023/08/26/validation"}},l={authorsImageUrls:[void 0]},c=[{value:"Why is Sanitisation Important?",id:"why-is-sanitisation-important",level:2},{value:"Where Should Sanitisation Occur?",id:"where-should-sanitisation-occur",level:2},{value:"Best Practices:",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"why-is-sanitisation-important"},"Why is Sanitisation Important?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Security"),": Sanitisation combats numerous potential vulnerabilities, especially injections attacks like SQL injection and Cross-Site Scripting (XSS). By ensuring input is safe before processing, we can mitigate these risks."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Data Consistency"),": Sanitisation ensures that the data adheres to expected formats, guaranteeing that it doesn't break application logic or cause unforeseen issues."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"User Experience (UX)"),": Sanitisation can help autocorrect user inputs, like removing extraneous spaces in email addresses, leading to a better user experience."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Resource Efficiency"),": Properly sanitised data can prevent faulty operations, reducing unnecessary strain on servers and databases.")),(0,i.kt)("h2",{id:"where-should-sanitisation-occur"},"Where Should Sanitisation Occur?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Client-Side Sanitisation"),": Useful for enhancing user experience by immediately correcting or formatting input. However, remember that like client-side validation, sanitisation at this level can be bypassed or tampered with.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function sanitiseEmail(email) {\n  return email.trim().toLowerCase();\n}\n\nconst userEmail = sanitiseEmail('   ExAMple@EmAIL.CoM   ');\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Server-Side Sanitisation"),": This is the paramount layer where sanitisation should be enforced. Never trust data coming from the client side without sanitising it on the server.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const express = require('express');\nconst app = express();\n\napp.post('/submit-data', (req, res) => {\n  let inputData = req.body.data;\n\n  // Simple sanitisation: Removing leading and trailing spaces\n  inputData = inputData.trim();\n\n  // Further processing of the sanitised data...\n  res.send('Data processed successfully!');\n});\n")),(0,i.kt)("h2",{id:"best-practices"},"Best Practices:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Sanitise Before Storing"),": Before saving any data to your database, ensure it's sanitised to prevent potential vulnerabilities."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Use Established Libraries"),": Whenever possible, leverage well-maintained libraries for sanitisation, like DOMPurify for sanitising HTML or validator.js for strings."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Escape Data"),": If you're outputting data into HTML, JavaScript, or any other context, make sure to escape it to prevent XSS attacks."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Stay Vigilant and Updated"),": New vulnerabilities emerge continuously, so always keep abreast of the latest threats and adjust your sanitisation strategies accordingly.")),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"Sanitisation is the unsung hero safeguarding our systems from potentially malicious or just malformed data. Paired with validation, sanitisation offers a robust defence mechanism, ensuring both the security and integrity of our applications. By understanding and implementing sanitisation correctly, developers can shield systems from a myriad of vulnerabilities and provide a more seamless user experience."))}m.isMDXComponent=!0}}]);