"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8462],{1895:e=>{e.exports=JSON.parse('{"label":"javascript","permalink":"/docs/tags/javascript","allTagsPath":"/docs/tags","count":13,"items":[{"id":"Express/chaining_middleware","title":"Chaining middleware in Express.js","description":"Chaining middleware in Express refers to the process of creating a series of middleware functions that are executed sequentially. Each middleware function has the opportunity to process the request and response objects, perform some logic, and then either respond to the request or call the next middleware in the chain using the next() function.","permalink":"/docs/Express/chaining_middleware"},{"id":"Express/error_handling","title":"Error Handling in Express","description":"Error handling is a crucial aspect of any application, and in Express.js, it\'s no different. In this blog post, we\'ll explore various ways to handle errors in Express, both synchronously and asynchronously, with practical examples.","permalink":"/docs/Express/error_handling"},{"id":"JavaScript/execution_context2","title":"Execution Context: Call Stack\\n","description":"The Execution Context (EC)","permalink":"/docs/JavaScript/execution_context2"},{"id":"JavaScript/execution_context3","title":"Execution Context: Lexical environment and block scop\\n","description":"Scope in JavaScript","permalink":"/docs/JavaScript/execution_context3"},{"id":"JavaScript/execution_context4","title":"Execution Context: Lexical environment and block scop\\n","description":"In JavaScript, the execution context governs the environment in which code is executed and how variables are accessed. There are three curucial aspects to understand how it works: scope chain, closure, and this keyword.","permalink":"/docs/JavaScript/execution_context4"},{"id":"JavaScript/execution_context","title":"Execution Context: Variables environment and Hoisting\\n","description":"Understanding JavaScript can often feel like untagling a ball of wool, especially with peculiar concept such as hoisting, closures, and the ubiquitous this. However, diving depp into how JavaScript works, especially its execution context, can provide clarity.","permalink":"/docs/JavaScript/execution_context"},{"id":"Express/json_middleware","title":"Internal Middleware: express.json()\\n","description":"express.json() is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on the body-parser module.","permalink":"/docs/Express/json_middleware"},{"id":"Express/router","title":"Internal Middleware: express.Router()\\n","description":"Router","permalink":"/docs/Express/router"},{"id":"Express/static_middleware","title":"Internal Middleware: express.static()\\n","description":"One of the Express.js powerful features is the ability to serve static files such as images, CSS files, and JavaScript files. This is where express.static() comes into play. In this article, we\'ll explore how to use express.static() to serve static files and create a more dynamic web experience.","permalink":"/docs/Express/static_middleware"},{"id":"Express/urlencoded_middleware","title":"Internal Middleware: express.urlencoded()\\n","description":"Starting from version 4.16.0, Express.js introduced a built-in middleware function called express.urlencoded(). This function plays a crucial role in parsing incoming requests with URL-encoded payloads. It\'s based on the body-parser library and provides essential functionality for handling form submissions in web applications.","permalink":"/docs/Express/urlencoded_middleware"},{"id":"Express/express_middleware","title":"Key Features of Middleware in Express","description":"Express.js is a popular web application framework for Node.js, and one of its core concepts is middleware. Middleware functions are functions that have access to the request object (req), the response object (res), and the next function in the application\u2019s request-response cycle. Let\'s dive into the details and explore the features, usage, and some examples of middleware in Express.js.","permalink":"/docs/Express/express_middleware"},{"id":"JavaScript/object","title":"Object","description":"Grouping Related Properties and Methods Together","permalink":"/docs/JavaScript/object"},{"id":"Express/why_use_express","title":"Why Use Express?","description":"Node.js","permalink":"/docs/Express/why_use_express"}]}')}}]);