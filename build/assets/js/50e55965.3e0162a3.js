"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9889],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6828:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={title:"Structuring a PHP File - Best Practices",tags:["php"],sidebar_label:"7. Structuring a PHP File: Best Practices",sidebar_position:7},o=void 0,s={unversionedId:"PHP/how_to_structure_php",id:"PHP/how_to_structure_php",title:"Structuring a PHP File - Best Practices",description:"PHP Code Block",source:"@site/docs/PHP/7_how_to_structure_php.md",sourceDirName:"PHP",slug:"/PHP/how_to_structure_php",permalink:"/docs/PHP/how_to_structure_php",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/PHP/7_how_to_structure_php.md",tags:[{label:"php",permalink:"/docs/tags/php"}],version:"current",sidebarPosition:7,frontMatter:{title:"Structuring a PHP File - Best Practices",tags:["php"],sidebar_label:"7. Structuring a PHP File: Best Practices",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"6. User-defined functions",permalink:"/docs/PHP/syntax_functions"},next:{title:"8. File Processing",permalink:"/docs/PHP/file_processing"}},l={},c=[{value:"1. Preparing the PHP Block",id:"1-preparing-the-php-block",level:2},{value:"A. Data Retrieval and Validation",id:"a-data-retrieval-and-validation",level:4},{value:"B. Processing and Variable Assignment",id:"b-processing-and-variable-assignment",level:4},{value:"2. Integrating HTML and PHP",id:"2-integrating-html-and-php",level:2},{value:"A. HTML Structure",id:"a-html-structure",level:4},{value:"B. Dynamic Content Insertion",id:"b-dynamic-content-insertion",level:4},{value:"C. Sanitizing Output",id:"c-sanitizing-output",level:4},{value:"Practice",id:"practice",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"PHP Code Block",src:n(7354).Z,width:"454",height:"497"})),(0,r.kt)("h2",{id:"1-preparing-the-php-block"},"1. Preparing the PHP Block"),(0,r.kt)("p",null,"Begin your PHP file by encapsulating PHP code within <?php and ?> tags. This initial PHP block serves as the foundation for processing data and setting up variables."),(0,r.kt)("p",null,"Within this block, follow these steps:"),(0,r.kt)("h4",{id:"a-data-retrieval-and-validation"},"A. Data Retrieval and Validation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"$_GET")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"$_POST")," superglobals to extract data sent to the PHP file through HTTP methods. These variables hold the input data from URL parameters and form submissions."),(0,r.kt)("li",{parentName:"ul"},"Implement thorough input validation to ensure the received data is valid, safe, and adheres to your application's requirements. This step helps prevent security vulnerabilities such as SQL injection and cross-site scripting (XSS) attacks."),(0,r.kt)("li",{parentName:"ul"},"Handle potential errors gracefully and provide meaningful feedback to users if validation fails.")),(0,r.kt)("h4",{id:"b-processing-and-variable-assignment"},"B. Processing and Variable Assignment"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Once the data is validated, process it as needed. Perform ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"calculations, database interactions, or any other operations necessary for your application's functionality")),"."),(0,r.kt)("li",{parentName:"ul"},"Assign the results of these operations to variables that will hold the output data to be displayed later in the HTML portion of the file.")),(0,r.kt)("h2",{id:"2-integrating-html-and-php"},"2. Integrating HTML and PHP"),(0,r.kt)("p",null,"The main body of your PHP file will be HTML, interspersed with PHP code where necessary. This separation of concerns enhances code readability and maintainability."),(0,r.kt)("h4",{id:"a-html-structure"},"A. HTML Structure"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a structured HTML layout that encompasses the visual elements of your page. This includes headings, paragraphs, forms, tables, and any other components required by your application."),(0,r.kt)("li",{parentName:"ul"},"Organize your HTML content logically, using appropriate HTML tags and attributes for semantic structure.")),(0,r.kt)("h4",{id:"b-dynamic-content-insertion"},"B. Dynamic Content Insertion"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Embed PHP code within the HTML where you want to display the dynamic content generated from your PHP processing. Use <?php ... ?> tags to enclose PHP code snippets."),(0,r.kt)("li",{parentName:"ul"},"Insert the values of the output variables into the HTML using echo statements. For example: ",(0,r.kt)("inlineCode",{parentName:"li"},"echo $outputValue;"),".")),(0,r.kt)("h4",{id:"c-sanitizing-output"},"C. Sanitizing Output"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To prevent cross-site scripting (XSS) attacks and ensure data security, sanitize the output data before embedding it in the HTML. Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"htmlspecialchars()")," function to convert special characters to their corresponding HTML entities."),(0,r.kt)("li",{parentName:"ul"},"Sanitizing output helps to display user-generated content without compromising the integrity of your web application.")),(0,r.kt)("h2",{id:"practice"},"Practice"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Code Block",src:n(3025).Z,width:"486",height:"717"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Presentation")," and ",(0,r.kt)("strong",{parentName:"li"},"Logic")," should be separated into two separate files."),(0,r.kt)("li",{parentName:"ol"},"PHP files that return HTML should primarily contain HTML."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"More complex functionality")," should be stored in spearte PHP files"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Constants")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Methods")," are often stored in a PHP file called ",(0,r.kt)("inlineCode",{parentName:"li"},"defs.php"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"defs.php")," is included by other PHP files.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'# factorise.php\n<?php\n/*\n* Script to print the prime factors of a single positive integer * sent from a form.\n* BAD STYLE: Does not use templates.\n*/\ninclude "includes/defs.php";\n# Set $number to the value entered in the form.\n$number = $_GET[\'number\'];\n# Check $number is nonempty, numeric and between 2 and PHP_MAX_INT = 2^31-1. # (PHP makes it difficult to do this naturally; see the manual.)\nif (empty($number)) {\n    echo "Error: Missing value\\n";\n    exit;\n} else if (!is_numeric($number)) {\n    echo "Error: Nonnumeric value: $number\\n";\n    exit;\n} else if ($number < 2 || $number != strval(intval($number))) {\n    echo "Error: Invalid number: $number\\n";\n  exit;\n}\n# Set $factors to the array of factors of $number.\n$factors = factors($number);\n# Set $factors to a single dot-separated string of numbers in the array.\n$factors = join(" . ", $factors); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Factors</title>\n  <meta charset="utf-8">\n</head>\n<body>\n  <h1>Factorisation</h1>\n  <p>\n    <?php echo "$number = $factors"; ?>\n  </p>\n  <p>\n    <a href="index.html">Another?</a>\n  </p>\n  <hr>\n  <p>\n    Sources:\n    <a href="show.php?file=factorise.php">factorise.php</a>\n    <a href="show.php?file=includes/defs.php">includes/defs.php</a>\n  </p>\n</body>\n</html>\n')),(0,r.kt)("p",null,"defs.php"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n/*\n* factors($n) returns an array of prime factors of valid integer $n. * Precondition: 2 <= n <= PHP_MAX_INT = 2^31-1.\n* Note that it is executed for its _value_ not for its _effect_.\n*/\nfunction factors($n){\n  $factors = array(); # initialise $factors to be an empty array $cand = 2;\n  while ($n > 1 && $cand*$cand <= $n) {\n    while ($n > 1 && $n % $cand == 0) {\n      $factors[] = $cand; # append $cand to the array $factors $n = $n / $cand;\n    }\n    $cand++;\n  }\n  if ($n > 1) {\n  $factors[] = $n; # append $n to the array $factors\n  }\n  return $factors;\n}\n?>\n")))}d.isMDXComponent=!0},7354:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/1-97ceb9337e7792fc9098b933c2a05af9.png"},3025:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2-3ef43fab123bc23418d85ad6fd3d1565.png"}}]);