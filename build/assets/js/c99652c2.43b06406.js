"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8381],{3905:(e,a,r)=>{r.d(a,{Zo:()=>u,kt:()=>y});var n=r(7294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var o=n.createContext({}),p=function(e){var a=n.useContext(o),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},u=function(e){var a=p(e.components);return n.createElement(o.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=t,y=c["".concat(o,".").concat(d)]||c[d]||m[d]||i;return r?n.createElement(y,s(s({ref:a},u),{},{components:r})):n.createElement(y,s({ref:a},u))}));function y(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=r.length,s=new Array(i);s[0]=d;var l={};for(var o in a)hasOwnProperty.call(a,o)&&(l[o]=a[o]);l.originalType=e,l[c]="string"==typeof e?e:t,s[1]=l;for(var p=2;p<i;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8173:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(7462),t=(r(7294),r(3905));const i={title:"Arrays in PHP",tags:["php"],sidebar_label:"4. Arrays in PHP",sidebar_position:4},s=void 0,l={unversionedId:"PHP/syntax_array",id:"PHP/syntax_array",title:"Arrays in PHP",description:"- An array in PHP is an ordered map.",source:"@site/docs/PHP/4_syntax_array.md",sourceDirName:"PHP",slug:"/PHP/syntax_array",permalink:"/docs/PHP/syntax_array",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/PHP/4_syntax_array.md",tags:[{label:"php",permalink:"/docs/tags/php"}],version:"current",sidebarPosition:4,frontMatter:{title:"Arrays in PHP",tags:["php"],sidebar_label:"4. Arrays in PHP",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"3. Basics of PHP Syntax",permalink:"/docs/PHP/syntax_basics"},next:{title:"5. Loops in PHP",permalink:"/docs/PHP/syntax_loop"}},o={},p=[{value:"1. Creating an Array",id:"1-creating-an-array",level:4},{value:"2. Assigning elements",id:"2-assigning-elements",level:4},{value:"3. Adding to the end of an array",id:"3-adding-to-the-end-of-an-array",level:4},{value:"4. Array Size",id:"4-array-size",level:4},{value:"5. Arrays as maps",id:"5-arrays-as-maps",level:4},{value:"6. Arrays and variable expansion",id:"6-arrays-and-variable-expansion",level:4},{value:"7. Join",id:"7-join",level:4}],u={toc:p},c="wrapper";function m(e){let{components:a,...r}=e;return(0,t.kt)(c,(0,n.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"An array in PHP is an ordered map."),(0,t.kt)("li",{parentName:"ul"},"A map associates values to keys."),(0,t.kt)("li",{parentName:"ul"},"Also known as an associative array.")),(0,t.kt)("h4",{id:"1-creating-an-array"},"1. Creating an Array"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Use the array() function to create a new array:",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$array = array();\n"))),(0,t.kt)("li",{parentName:"ul"},"No size is specified, PHP will automatically grow the array as needed."),(0,t.kt)("li",{parentName:"ul"},"The array() function can also specify a list of initial values.",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$array = array(1,2,3,4);\n"))),(0,t.kt)("li",{parentName:"ul"},"You can also create an array using ",(0,t.kt)("inlineCode",{parentName:"li"},"[]"),".",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$array = [];\n$array = [1,2,3,4];\n")))),(0,t.kt)("h4",{id:"2-assigning-elements"},"2. Assigning elements"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Values can be assgined to array locations using indexes, e.g.:",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$numbers = array();\n$numbers[0] = 1;\n$numbers[1] = 2;\n$numbers[2] = 3;\n")))),(0,t.kt)("h4",{id:"3-adding-to-the-end-of-an-array"},"3. Adding to the end of an array"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"If no index is specified, the maximum of the integer index values is taken and that value plus one will be used:",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$numbers[] = 4;\necho $numbers[3]; // will print 4\n")))),(0,t.kt)("h4",{id:"4-array-size"},"4. Array Size"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"The count() function is used to return the number of elements in an array.",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"echo count ($numbers); // prints 4\n")))),(0,t.kt)("h4",{id:"5-arrays-as-maps"},"5. Arrays as maps"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"An array can also be used as a map where keys are specified as either integers or strings and values can be any PHP type.",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$person['name'] = 'Tom';\n$person['age'] = 20;\necho $person['name'], ' is ', $person['age'];\n"))),(0,t.kt)("li",{parentName:"ul"},"Arrays can also be initiated with ",(0,t.kt)("inlineCode",{parentName:"li"},"key => value")," pairs:",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$person = array('name' => 'Tom', 'age' => 20);\n")))),(0,t.kt)("h4",{id:"6-arrays-and-variable-expansion"},"6. Arrays and variable expansion"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"echo \u201c${person['name']} is ${person['age']}\u201d;\n")),(0,t.kt)("h4",{id:"7-join"},"7. Join"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"A useful array function is ",(0,t.kt)("inlineCode",{parentName:"li"},"join(separator, array)")),(0,t.kt)("li",{parentName:"ul"},"join() creates a string containing all elements of the array separated by the string specified in the first parameter.",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$fruit = array('apple', 'orange', 'pineapple');\necho join(', ', $fruit);\n// prints: apple, orange, pineapple\n")))))}m.isMDXComponent=!0}}]);