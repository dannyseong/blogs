"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6990],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,v=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?i.createElement(v,r(r({ref:t},p),{},{components:n})):i.createElement(v,r({ref:t},p))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4557:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const o={title:"Execution Context: Variables environment and Hoisting\n",tags:["javascript"],sidebar_label:"1. Execution Context #1",sidebar_position:1},r=void 0,l={unversionedId:"JavaScript/execution_context",id:"JavaScript/execution_context",title:"Execution Context: Variables environment and Hoisting\n",description:"Understanding JavaScript can often feel like untagling a ball of wool, especially with peculiar concept such as hoisting, closures, and the ubiquitous this. However, diving depp into how JavaScript works, especially its execution context, can provide clarity.",source:"@site/docs/JavaScript/1_execution_context.md",sourceDirName:"JavaScript",slug:"/JavaScript/execution_context",permalink:"/docs/JavaScript/execution_context",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/JavaScript/1_execution_context.md",tags:[{label:"javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:1,frontMatter:{title:"Execution Context: Variables environment and Hoisting\n",tags:["javascript"],sidebar_label:"1. Execution Context #1",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Version Control System and Git",permalink:"/docs/Git/version_control_and_git"},next:{title:"2. Execution Context #2",permalink:"/docs/JavaScript/execution_context2"}},c={},s=[{value:"Comppilation and Execution",id:"comppilation-and-execution",level:2},{value:"Execution Context",id:"execution-context",level:2},{value:"Variable Environment and Hoisting",id:"variable-environment-and-hoisting",level:2},{value:"Functions &amp; Hoisting",id:"functions--hoisting",level:3},{value:"Edge Cases",id:"edge-cases",level:3}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Understanding JavaScript can often feel like untagling a ball of wool, especially with peculiar concept such as ",(0,a.kt)("inlineCode",{parentName:"p"},"hoisting"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"closures"),", and the ubiquitous ",(0,a.kt)("inlineCode",{parentName:"p"},"this"),". However, diving depp into how JavaScript works, especially its execution context, can provide clarity."),(0,a.kt)("h2",{id:"comppilation-and-execution"},"Comppilation and Execution"),(0,a.kt)("p",null,"When you run JavaScript, two primary processes occur:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Compliation"),": Before anything gets executed, JavaScript Engine scans the entire code. This phase involves setting up memory for variables and functions."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Execution"),": After compilation, JavaScript runs the code line-by-line, and assign values and execute functions.")),(0,a.kt)("mermaid",{value:'  flowchart LR\n    a("Javascript Code")--"compile"--\x3eb("Execution Context")\n    --"execute"--\x3ec("Output")\n'}),(0,a.kt)("h2",{id:"execution-context"},"Execution Context"),(0,a.kt)("p",null,"The execution context, which gets created during the compilation phase, is essential to grasp. It main consists of:"),(0,a.kt)("mermaid",{value:'  flowchart LR\n    subgraph EXECUTION_CONTEXT\n      a("Variable Env.")\n      b("Lexical Env.")\n      c("Outer Env.")\n      d("this binding")\n    end\n    Complie --\x3e EXECUTION_CONTEXT --\x3e Execute\n    '}),(0,a.kt)("h2",{id:"variable-environment-and-hoisting"},"Variable Environment and Hoisting"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sample Code"',title:'"Sample','Code"':!0},"console.log(apple);//Output: undefined\nvar apple = 10;\n")),(0,a.kt)("p",null,"At the compilation phase, a variable ",(0,a.kt)("inlineCode",{parentName:"p"},"apple")," is declared and set to ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," in the variable environment. The actual assignment(",(0,a.kt)("inlineCode",{parentName:"p"},"apple = 10"),") only happens during the execution phase. Hence the console logs ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),". This phenomenon, where variable and function declarations are lifted to the top of their containing scope, is referred to as ",(0,a.kt)("inlineCode",{parentName:"p"},"hoisting"),"."),(0,a.kt)("p",null,'However, from the execution context\'s perspective, no actual "lifting" happens. The variable was already declared during the compilation phase. So, the term "hoisting" is more of a figurative description'),(0,a.kt)("h3",{id:"functions--hoisting"},"Functions & Hoisting"),(0,a.kt)("p",null,"Things get a bit nuanced with functions. Consider:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(showName); // Output: undefined\nvar showName = function() { \n    console.log("Hey, show a number"); \n  }\n')),(0,a.kt)("p",null,"Here, during compilation, ",(0,a.kt)("inlineCode",{parentName:"p"},"showName")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," since the function is assigned as an expression. Thus, the console logs ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),", and if you try to invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"showName"),", it will throw an error as it's not yet a function."),(0,a.kt)("p",null,"Interestingly, ",(0,a.kt)("strong",{parentName:"p"},"if there's a function declaration (not expression)")," with the same name as a variable, the function takes precedence during compilation."),(0,a.kt)("h3",{id:"edge-cases"},"Edge Cases"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Naming Conflict"),": If a function and a variable have the same name, the variable won't override the function during compilation. Always ensure unique naming to avoid unexpected behaviors."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Conditional Declarations"),": Even if a variable is declared inside an ",(0,a.kt)("inlineCode",{parentName:"li"},"if")," block that never runs, during compilation, the variable is still hoisted and set to ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"if (false) {\n   var apple = 10;\n}\nconsole.log(apple); // Output: undefined\n")),(0,a.kt)("p",null,"Despite the condition being false, apple is declared and the console logs undefined."))}d.isMDXComponent=!0}}]);