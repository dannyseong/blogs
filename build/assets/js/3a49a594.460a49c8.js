"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2809],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=i,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(k,r(r({ref:t},c),{},{components:a})):n.createElement(k,r({ref:t},c))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9915:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const o={title:"Execution Context: Lexical environment and block scop\n",tags:["javascript"],sidebar_label:"3. Execution Context #3",sidebar_position:3},r=void 0,l={unversionedId:"JavaScript/execution_context3",id:"JavaScript/execution_context3",title:"Execution Context: Lexical environment and block scop\n",description:"Scope in JavaScript",source:"@site/docs/JavaScript/3_execution_context3.md",sourceDirName:"JavaScript",slug:"/JavaScript/execution_context3",permalink:"/docs/JavaScript/execution_context3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/JavaScript/3_execution_context3.md",tags:[{label:"javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:3,frontMatter:{title:"Execution Context: Lexical environment and block scop\n",tags:["javascript"],sidebar_label:"3. Execution Context #3",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"2. Execution Context #2",permalink:"/docs/JavaScript/execution_context2"},next:{title:"5. Object",permalink:"/docs/JavaScript/object"}},s={},p=[{value:"Scope in JavaScript",id:"scope-in-javascript",level:2},{value:"Understanding throuhg Examples",id:"understanding-throuhg-examples",level:2},{value:"Global Scope Example:",id:"global-scope-example",level:3},{value:"Block Scope Example with <code>let</code>",id:"block-scope-example-with-let",level:3},{value:"Behind the Scenes: How does it work?",id:"behind-the-scenes-how-does-it-work",level:2},{value:"Deeper Dive: <code>let</code>, <code>var</code>, and Hoisting",id:"deeper-dive-let-var-and-hoisting",level:2},{value:"Temporal Dead Zone",id:"temporal-dead-zone",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"scope-in-javascript"},"Scope in JavaScript"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Global Scope: Variables defined outside any function or block."),(0,i.kt)("li",{parentName:"ol"},"Function Scope: Variables defined within a function"),(0,i.kt)("li",{parentName:"ol"},"Block Scope(",(0,i.kt)("em",{parentName:"li"},"introduced in ES6"),"): Variables defined inside a block (like inside ",(0,i.kt)("inlineCode",{parentName:"li"},"{}")," of an if-statement).")),(0,i.kt)("h2",{id:"understanding-throuhg-examples"},"Understanding throuhg Examples"),(0,i.kt)("h3",{id:"global-scope-example"},"Global Scope Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var apple = "apple";\napple = "banana";\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You started with a variable ",(0,i.kt)("inlineCode",{parentName:"li"},"apple"),' with value "apple".'),(0,i.kt)("li",{parentName:"ul"},'Then you changed its value to "banana".'),(0,i.kt)("li",{parentName:"ul"},"There's only one ",(0,i.kt)("inlineCode",{parentName:"li"},"apple"),' in the global scope, and its value is now "banana".')),(0,i.kt)("h3",{id:"block-scope-example-with-let"},"Block Scope Example with ",(0,i.kt)("inlineCode",{parentName:"h3"},"let")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var apple = "apple";\nif (true) {\n  let apple = "banna";\n  console.log(apple); // Outputs: "banana"\n}\nconsole.log(apple); // Outputs: "apple"\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"if")," block, you have a different ",(0,i.kt)("inlineCode",{parentName:"li"},"apple")," variables, thanks to ",(0,i.kt)("inlineCode",{parentName:"li"},"let"),"."),(0,i.kt)("li",{parentName:"ul"},"Outside the block, the original ",(0,i.kt)("inlineCode",{parentName:"li"},"apple")," retains its value.")),(0,i.kt)("h2",{id:"behind-the-scenes-how-does-it-work"},"Behind the Scenes: How does it work?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'When the JavaScript engine sees your code, it prepares by setting aside space for variables (this is called "compiling").'),(0,i.kt)("li",{parentName:"ol"},"For the ",(0,i.kt)("inlineCode",{parentName:"li"},"var"),' keyword, the variable is prepared in the "global execution context" or function context.'),(0,i.kt)("li",{parentName:"ol"},"For the ",(0,i.kt)("inlineCode",{parentName:"li"},"let"),' keyword inside a block, the variable is managed separately in a "lexical environment".'),(0,i.kt)("li",{parentName:"ol"},"This separation allows ",(0,i.kt)("inlineCode",{parentName:"li"},"let")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"var")," to coexist and lets you have two variables with the same name without conflict.")),(0,i.kt)("h2",{id:"deeper-dive-let-var-and-hoisting"},"Deeper Dive: ",(0,i.kt)("inlineCode",{parentName:"h2"},"let"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"var"),", and Hoisting"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'When JS prepares your code, it does a thing called "hoisting". This means it sets aside space for variables and functions even before it runs any code.'),(0,i.kt)("li",{parentName:"ul"},"The key differences:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"var"),": Space is set aside and initialized to ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"let"),": Space is set aside but not initialized. Trying to use it before declaration will throw an error."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Functions"),": The whole function is hoisted.")))),(0,i.kt)("h2",{id:"temporal-dead-zone"},"Temporal Dead Zone"),(0,i.kt)("p",null,"This is the period where a variable has space set aside (due to hoisting) but hasn't been initialized yet. If you try to access a ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," variable in this zone, you'll get an error."),(0,i.kt)("h2",{id:"key-takeaways"},"Key Takeaways"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Lexical Environment"),": This is like a storage component for let and const variables, especially those inside blocks."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Creation vs. Initialization"),": Variables are created and space is set aside during compiling, but they're given values (initialized) during execution."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Stack Structure"),": When you have multiple blocks (like nested if-statements), each block's variables are stacked on top of the other. When the block finishes executing, its variables are thrown away."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Accessing Variables"),": Depending on where and how you've declared a variable (var, let, or const), trying to access it too early might give you an error or undefined.")))}u.isMDXComponent=!0}}]);