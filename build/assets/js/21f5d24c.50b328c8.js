"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[14],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),h=a,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={title:"Execution Context: Lexical environment and block scop\n",tags:["javascript"],sidebar_label:"Execution Context #4",sidebar_position:4},i=void 0,c={unversionedId:"JavaScript/execution_context4",id:"JavaScript/execution_context4",title:"Execution Context: Lexical environment and block scop\n",description:"In JavaScript, the execution context governs the environment in which code is executed and how variables are accessed. There are three curucial aspects to understand how it works: scope chain, closure, and this keyword.",source:"@site/docs/JavaScript/4_execution_context4.md",sourceDirName:"JavaScript",slug:"/JavaScript/execution_context4",permalink:"/docs/JavaScript/execution_context4",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/JavaScript/4_execution_context4.md",tags:[{label:"javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:4,frontMatter:{title:"Execution Context: Lexical environment and block scop\n",tags:["javascript"],sidebar_label:"Execution Context #4",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Execution Context #3",permalink:"/docs/JavaScript/execution_context3"},next:{title:"5. Object",permalink:"/docs/JavaScript/object"}},l={},s=[{value:"Scope Chain",id:"scope-chain",level:2},{value:"What is Scope?",id:"what-is-scope",level:3},{value:"Scope Chain",id:"scope-chain-1",level:3},{value:"Closure",id:"closure",level:2},{value:"How to Create a Closure?",id:"how-to-create-a-closure",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"The <code>this</code> Keyword",id:"the-this-keyword",level:2},{value:"Global Context",id:"global-context",level:3},{value:"Function Context",id:"function-context",level:3},{value:"Object Method",id:"object-method",level:3},{value:"Class Context",id:"class-context",level:3}],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In JavaScript, the execution context governs the environment in which code is executed and how variables are accessed. There are three curucial aspects to understand how it works: scope chain, closure, and ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," keyword."),(0,a.kt)("h2",{id:"scope-chain"},"Scope Chain"),(0,a.kt)("h3",{id:"what-is-scope"},"What is Scope?"),(0,a.kt)("p",null,"In JavaScript, a scope is an environment where variables and functions live. There are three types of scope:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Global Scope"),(0,a.kt)("li",{parentName:"ol"},"Function Scope"),(0,a.kt)("li",{parentName:"ol"},"Block Scope (introduced with ",(0,a.kt)("inlineCode",{parentName:"li"},"let")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"const")," in ECMA2016)")),(0,a.kt)("h3",{id:"scope-chain-1"},"Scope Chain"),(0,a.kt)("p",null,"When a variable is used, JavaScript engine looks for it in the current scope. If it doesn't find it, it goes up to the parent scope, and then its parent and so on, until it reaches the global scope. This hierarchical linkage of scopes is known as the scope chain."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var globalVar = 'I am global';\n\nfunction outerFunction() {\n  var outerVar = 'I am outer';\n\n  function innerFunction() {\n    var innerVar = 'I am inner';\n    console.log(globalVar); // Output: \"I am global\"\n    console.log(outerVar); // Output: \"I am outer\"\n    console.log(innerVar); // Output: \"I am inner\"\n  }\n\n  innerFunction();\n}\n\nouterFunction();\n")),(0,a.kt)("h2",{id:"closure"},"Closure"),(0,a.kt)("p",null,"A closure is a function bundled together with its lexical environment. Closures allow JavaScript programmers to write better, more concise, and modular code."),(0,a.kt)("h3",{id:"how-to-create-a-closure"},"How to Create a Closure?"),(0,a.kt)("p",null,"A closure is created every time a function is defined within another function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function outer() {\n  var outerVar = 'I am from outer function';\n\n  function inner() {\n    console.log(outerVar);\n  }\n\n  return inner;\n}\n\nconst myClosure = outer();\nmyClosure(); // Output: \"I am from outer function\"\n")),(0,a.kt)("h3",{id:"use-cases"},"Use Cases"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Data Privacy"),(0,a.kt)("li",{parentName:"ul"},"Function Factories"),(0,a.kt)("li",{parentName:"ul"},"Dynamic Function Generation")),(0,a.kt)("h2",{id:"the-this-keyword"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"this")," Keyword"),(0,a.kt)("p",null,"In JavaScript, the this keyword refers to the object on which a method is invoked. It has different values depending on where it is used."),(0,a.kt)("h3",{id:"global-context"},"Global Context"),(0,a.kt)("p",null,"In a global context, or within a function but not in strict mode, this refers to the global object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(this === window); // Output: true\n")),(0,a.kt)("h3",{id:"function-context"},"Function Context"),(0,a.kt)("p",null,"Within a function, the value of this depends on how the function is called."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function checkThis() {\n  console.log(this);\n}\n\ncheckThis(); // Output: Window object (or global object in a non-browser environment)\n")),(0,a.kt)("h3",{id:"object-method"},"Object Method"),(0,a.kt)("p",null,"When a function is called as an object method, this refers to that object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const myObject = {\n  name: 'John',\n  greet: function () {\n    console.log(`Hello, my name is ${this.name}`);\n  },\n};\n\nmyObject.greet(); // Output: \"Hello, my name is John\"\n")),(0,a.kt)("h3",{id:"class-context"},"Class Context"),(0,a.kt)("p",null,"In a class constructor and class methods, this refers to the instance of the class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"class MyClass {\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst instance = new MyClass('John');\ninstance.greet(); // Output: \"Hello, my name is John\"\n")))}d.isMDXComponent=!0}}]);